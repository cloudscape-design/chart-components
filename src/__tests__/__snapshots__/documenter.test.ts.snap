// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`definition for cartesian-chart matches the snapshot > cartesian-chart 1`] = `
{
  "dashCaseName": "cartesian-chart",
  "events": [
    {
      "cancelable": false,
      "description": "A callback function, triggered when series visibility changes as a result of user interaction with the legend or filter.",
      "detailInlineType": {
        "name": "{ visibleSeries: Array<string>; }",
        "properties": [
          {
            "name": "visibleSeries",
            "optional": false,
            "type": "Array<string>",
          },
        ],
        "type": "object",
      },
      "detailType": "{ visibleSeries: Array<string>; }",
      "name": "onVisibleSeriesChange",
    },
  ],
  "functions": [
    {
      "description": "Controls series visibility and works with both controlled and uncontrolled visibility modes.",
      "name": "setVisibleSeries",
      "parameters": [
        {
          "name": "visibleSeries",
          "type": "ReadonlyArray<string>",
        },
      ],
      "returnType": "void",
    },
    {
      "description": "Functions similarly to \`setVisibleSeries\`, but applies to all series and doesn't require series IDs as input.
Use this when implementing clear-filter actions in no-match states.",
      "name": "showAllSeries",
      "parameters": [],
      "returnType": "void",
    },
  ],
  "name": "CartesianChart",
  "properties": [
    {
      "description": "Defines the ARIA description of the chart container.
This property corresponds to [accessibility.description](https://api.highcharts.com/highcharts/accessibility.description),
and requires the [accessibility module](https://www.highcharts.com/docs/accessibility/accessibility-module).",
      "name": "ariaDescription",
      "optional": true,
      "type": "string",
    },
    {
      "description": "Defines the ARIA label for the chart container.
This property corresponds to [lang.chartContainerLabel](https://api.highcharts.com/highcharts/lang.accessibility.chartContainerLabel),
and requires the [accessibility module](https://www.highcharts.com/docs/accessibility/accessibility-module).",
      "name": "ariaLabel",
      "optional": true,
      "type": "string",
    },
    {
      "description": "The height of the chart plot in pixels. It does not include legend and filter.",
      "name": "chartHeight",
      "optional": true,
      "type": "number",
    },
    {
      "description": "Defines the minimum allowed height of the chart plot. Use this when \`fitHeight=true\` to
prevent the chart plot from becoming too small to display its content. When the parent
container is smaller than the minimum height, a vertical scrollbar appears automatically.",
      "name": "chartMinHeight",
      "optional": true,
      "type": "number",
    },
    {
      "description": "Defines the minimum allowed width of the chart plot. When the parent container is smaller the
minimum width, the horizontal scrollbar is automatically added.",
      "name": "chartMinWidth",
      "optional": true,
      "type": "number",
    },
    {
      "defaultValue": "true",
      "description": "When set to \`true\`, adds a visual emphasis on the zero baseline axis.",
      "name": "emphasizeBaseline",
      "optional": true,
      "type": "boolean",
    },
    {
      "description": "Defines options for filtering in the chart, including:
* \`seriesFilter\` (optional, boolean) - Displays default series filter at the top of the chart.
* \`additionalFilters\` (optional, slot) - A slot for custom chart filters at the top of the chart.",
      "inlineType": {
        "name": "BaseFilterOptions",
        "properties": [
          {
            "name": "additionalFilters",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "seriesFilter",
            "optional": true,
            "type": "boolean",
          },
        ],
        "type": "object",
      },
      "name": "filter",
      "optional": true,
      "type": "BaseFilterOptions",
    },
    {
      "defaultValue": "false",
      "description": "The chart automatically adjusts its height to fill the parent container when this property is set.",
      "name": "fitHeight",
      "optional": true,
      "type": "boolean",
    },
    {
      "description": "The Highcharts instance, which can be obtained using \`import Highcharts from "highcharts"\`.
Supported Highcharts versions: 12.",
      "name": "highcharts",
      "optional": false,
      "type": "object | null",
    },
    {
      "description": "An object that contains all of the localized strings required by the component.",
      "i18nTag": true,
      "inlineType": {
        "name": "CartesianI18nStrings",
        "properties": [
          {
            "name": "chartRoleDescription",
            "optional": true,
            "type": "string",
          },
          {
            "name": "detailPopoverDismissAriaLabel",
            "optional": true,
            "type": "string",
          },
          {
            "name": "errorText",
            "optional": true,
            "type": "string",
          },
          {
            "name": "legendAriaLabel",
            "optional": true,
            "type": "string",
          },
          {
            "name": "loadingText",
            "optional": true,
            "type": "string",
          },
          {
            "name": "recoveryText",
            "optional": true,
            "type": "string",
          },
          {
            "name": "seriesFilterLabel",
            "optional": true,
            "type": "string",
          },
          {
            "name": "seriesFilterPlaceholder",
            "optional": true,
            "type": "string",
          },
          {
            "name": "seriesFilterSelectedAriaLabel",
            "optional": true,
            "type": "string",
          },
          {
            "name": "xAxisRoleDescription",
            "optional": true,
            "type": "string",
          },
          {
            "name": "yAxisRoleDescription",
            "optional": true,
            "type": "string",
          },
        ],
        "type": "object",
      },
      "name": "i18nStrings",
      "optional": true,
      "type": "CartesianI18nStrings",
    },
    {
      "defaultValue": "false",
      "description": "Inverts X and Y axes. Use it to show horizontal columns (bars).
This property corresponds to [chart.inverted](https://api.highcharts.com/highcharts/chart.inverted).",
      "name": "inverted",
      "optional": true,
      "type": "boolean",
    },
    {
      "description": "Defines chart legend options, including:
* \`enabled\` (optional, boolean) - Hides legend when set to \`false\`.
* \`title\` (optional, string) - Visible label, shown above the legend.
* \`actions\` (optional, slot) - A slot before the legend that can be used to render custom actions.",
      "inlineType": {
        "name": "BaseLegendOptions",
        "properties": [
          {
            "name": "actions",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "enabled",
            "optional": true,
            "type": "boolean",
          },
          {
            "name": "title",
            "optional": true,
            "type": "string",
          },
        ],
        "type": "object",
      },
      "name": "legend",
      "optional": true,
      "type": "BaseLegendOptions",
    },
    {
      "description": "Defines options to represent empty, no-match, loading, and error state of the chart, including:
* \`statusType\` (optional, "finished" | "loading" | "error") - Specifies the current status of loading data.
* \`empty\` (optional, ReactNode) - Content displayed when the chart data is empty.
* \`noMatch\` (optional, ReactNode) - Content displayed when there is no data to display due to the built-in filtering.
* \`loading\` (optional, ReactNode) - Content displayed when \`statusType="loading"\`. If omitted, the default loading state
is shown, using \`i18n.loadingText\` or built-in i18n.
* \`error\` (optional, ReactNode) - Content displayed when \`statusType="error"\`. If omitted, the default error state
is shown, using \`i18n.errorText\` and \`i18n.recoveryText\` (when \`onRecoveryClick\` is provided), or built-in i18n.
* \`onRecoveryClick\` (optional, function) - Called when the user clicks the recovery button that appears when using default error
state, and only if \`onRecoveryClick\` is provided. Use this to enable the user to retry a failed request or provide another option
for the user to recover from the error.",
      "inlineType": {
        "name": "BaseNoDataOptions",
        "properties": [
          {
            "name": "empty",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "error",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "loading",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "noMatch",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "onRecoveryClick",
            "optional": true,
            "type": "NonCancelableEventHandler<{}>",
          },
          {
            "name": "statusType",
            "optional": true,
            "type": ""finished" | "loading" | "error"",
          },
        ],
        "type": "object",
      },
      "name": "noData",
      "optional": true,
      "type": "BaseNoDataOptions",
    },
    {
      "description": "Defines series options of the chart.
This property corresponds to [series](https://api.highcharts.com/highcharts/series), and extends it
with two additional series types: "x-threshold", and "y-threshold".

Supported types:
* [area](https://api.highcharts.com/highcharts/series.area).
* [areaspline](https://api.highcharts.com/highcharts/series.areaspline).
* [column](https://api.highcharts.com/highcharts/series.column).
* [errorbar](https://api.highcharts.com/highcharts/series.errorbar) - requires "highcharts/highcharts-more" module.
* [line](https://api.highcharts.com/highcharts/series.line).
* [scatter](https://api.highcharts.com/highcharts/series.scatter).
* [spline](https://api.highcharts.com/highcharts/series.spline).
* x-threshold - The line-like series to represent x-axis threshold (vertical, when \`inverted=false\`).
* y-threshold - The line-like series to represent y-axis threshold (horizontal, when \`inverted=false\`).",
      "name": "series",
      "optional": false,
      "type": "ReadonlyArray<CartesianChartProps.SeriesOptions>",
    },
    {
      "defaultValue": "undefined",
      "description": "Enables series stacking behavior. Use it for column- or area- series.
This property corresponds to "normal" stacking type in Highcharts ([plotOptions.series.stacking](https://api.highcharts.com/highcharts/plotOptions.series.stacking)).",
      "name": "stacking",
      "optional": true,
      "type": ""normal"",
    },
    {
      "description": "Defines tooltip options of the chart, including:
* \`enabled\` - (optional, boolean) - Hides the tooltip when set to false.
* \`size\` - (optional, "small" | "medium" | "large") - Specifies max tooltip size.
* \`placement\` - (optional, "middle" | "outside") - Specifies preferred tooltip placement.
* \`point\` - (optional, function) - Customizes tooltip series point rendering.
* \`header\` - (optional, function) - Renders a custom tooltip header.
* \`body\` - (optional, function) - Renders a custom tooltip body.
* \`footer\` - (optional, function) - Renders a custom tooltip footer.",
      "inlineType": {
        "name": "CartesianChartProps.TooltipOptions",
        "properties": [
          {
            "name": "body",
            "optional": true,
            "type": "((props: CartesianChartProps.TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "enabled",
            "optional": true,
            "type": "boolean",
          },
          {
            "name": "footer",
            "optional": true,
            "type": "((props: CartesianChartProps.TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "header",
            "optional": true,
            "type": "((props: CartesianChartProps.TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "placement",
            "optional": true,
            "type": ""middle" | "outside"",
          },
          {
            "name": "point",
            "optional": true,
            "type": "((props: CartesianChartProps.TooltipPointRenderProps) => BaseTooltipPointFormatted)",
          },
          {
            "name": "size",
            "optional": true,
            "type": ""small" | "medium" | "large"",
          },
        ],
        "type": "object",
      },
      "name": "tooltip",
      "optional": true,
      "type": "CartesianChartProps.TooltipOptions",
    },
    {
      "defaultValue": ""top"",
      "description": "Controls the placement of the vertical axis title.
When set to "side", displays the title along the axis line.",
      "inlineType": {
        "name": ""top" | "side"",
        "type": "union",
        "values": [
          "top",
          "side",
        ],
      },
      "name": "verticalAxisTitlePlacement",
      "optional": true,
      "type": "string",
    },
    {
      "description": "Specifies which series to show using their IDs. By default, all series are visible and managed by the component.
If a series doesn't have an ID, its name is used. When using this property, manage state updates with \`onVisibleSeriesChange\`.",
      "name": "visibleSeries",
      "optional": true,
      "type": "ReadonlyArray<string>",
    },
    {
      "description": "Defines options of the chart's x axis.
This property corresponds to [xAxis](https://api.highcharts.com/highcharts/xAxis), and extends it
with a custom value formatter.

Supported options:
* \`title\` (optional, string) - Axis title.
* \`type\` (optional, "linear" | "datetime" | "category" | "logarithmic") - Axis type.
* * "linear" - Uses continuous proportional values scale.
* * "datetime" - Similar to linear, but takes epoch time as values.
* * "category" - Uses discrete scale, requires \`categories\` to be set.
* * "logarithmic" - Uses continuous logarithmic values scale.
* \`min\` (optional, number) - Axis min value boundary.
* \`max\` (optional, number) - Axis max value boundary.
* \`tickInterval\` (optional, number) - Distance between axis ticks.
* \`categories\` (optional, Array<string>) - Predefined list of values, used for categorical axis type.
* \`valueFormatter\` (optional, function) - Takes axis tick as input and returns a formatted string. This formatter also
applies to the tooltip header.",
      "inlineType": {
        "name": "AxisOptions",
        "properties": [
          {
            "name": "categories",
            "optional": true,
            "type": "Array<string>",
          },
          {
            "name": "max",
            "optional": true,
            "type": "number",
          },
          {
            "name": "min",
            "optional": true,
            "type": "number",
          },
          {
            "name": "tickInterval",
            "optional": true,
            "type": "number",
          },
          {
            "name": "title",
            "optional": true,
            "type": "string",
          },
          {
            "name": "type",
            "optional": true,
            "type": ""category" | "datetime" | "linear" | "logarithmic"",
          },
          {
            "name": "valueFormatter",
            "optional": true,
            "type": "((value: number | null) => string)",
          },
        ],
        "type": "object",
      },
      "name": "xAxis",
      "optional": true,
      "type": "AxisOptions",
    },
    {
      "description": "Defines options of the chart's y axis.
This property corresponds to [xAxis](https://api.highcharts.com/highcharts/yAxis), and extends it
with a custom value formatter.

Supported options:
* \`title\` (optional, string) - Axis title.
* \`type\` (optional, "linear" | "datetime" | "category" | "logarithmic") - Axis type.
* * "linear" - Uses continuous proportional values scale.
* * "datetime" - Similar to linear, but takes epoch time as values.
* * "category" - Uses discrete scale, requires \`categories\` to be set.
* * "logarithmic" - Uses continuous logarithmic values scale.
* \`min\` (optional, number) - Axis min value boundary.
* \`max\` (optional, number) - Axis max value boundary.
* \`tickInterval\` (optional, number) - Distance between axis ticks.
* \`categories\` (optional, Array<string>) - Predefined list of values, used for categorical axis type.
* \`reversedStacks\` (optional, boolean) - Reverts series order in stacked series.
* \`valueFormatter\` (optional, function) - Takes axis tick as input and returns a formatted string. This formatter also
applies to the tooltip points values.",
      "inlineType": {
        "name": "CartesianChartProps.YAxisOptions",
        "properties": [
          {
            "name": "categories",
            "optional": true,
            "type": "Array<string>",
          },
          {
            "name": "max",
            "optional": true,
            "type": "number",
          },
          {
            "name": "min",
            "optional": true,
            "type": "number",
          },
          {
            "name": "reversedStacks",
            "optional": true,
            "type": "boolean",
          },
          {
            "name": "tickInterval",
            "optional": true,
            "type": "number",
          },
          {
            "name": "title",
            "optional": true,
            "type": "string",
          },
          {
            "name": "type",
            "optional": true,
            "type": ""category" | "datetime" | "linear" | "logarithmic"",
          },
          {
            "name": "valueFormatter",
            "optional": true,
            "type": "((value: number | null) => string)",
          },
        ],
        "type": "object",
      },
      "name": "yAxis",
      "optional": true,
      "type": "CartesianChartProps.YAxisOptions",
    },
  ],
  "regions": [
    {
      "description": "Custom content that renders when \`highcharts=null\`. It renders a spinner if not defined.",
      "isDefault": false,
      "name": "fallback",
    },
  ],
  "releaseStatus": "stable",
}
`;

exports[`definition for pie-chart matches the snapshot > pie-chart 1`] = `
{
  "dashCaseName": "pie-chart",
  "events": [
    {
      "cancelable": false,
      "description": "A callback function, triggered when segments visibility changes as a result of user interaction with the legend or filter.",
      "detailInlineType": {
        "name": "{ visibleSegments: Array<string>; }",
        "properties": [
          {
            "name": "visibleSegments",
            "optional": false,
            "type": "Array<string>",
          },
        ],
        "type": "object",
      },
      "detailType": "{ visibleSegments: Array<string>; }",
      "name": "onVisibleSegmentsChange",
    },
  ],
  "functions": [
    {
      "description": "Controls segments visibility and works with both controlled and uncontrolled visibility modes.",
      "name": "setVisibleSegments",
      "parameters": [
        {
          "name": "visibleSegments",
          "type": "ReadonlyArray<string>",
        },
      ],
      "returnType": "void",
    },
    {
      "description": "Functions similarly to \`setVisibleSeries\`, but applies to all series and doesn't require series IDs as input.
Use this when implementing clear-filter actions in no-match states.",
      "name": "showAllSegments",
      "parameters": [],
      "returnType": "void",
    },
  ],
  "name": "PieChart",
  "properties": [
    {
      "description": "Defines the ARIA description of the chart container.
This property corresponds to [accessibility.description](https://api.highcharts.com/highcharts/accessibility.description),
and requires the [accessibility module](https://www.highcharts.com/docs/accessibility/accessibility-module).",
      "name": "ariaDescription",
      "optional": true,
      "type": "string",
    },
    {
      "description": "Defines the ARIA label for the chart container.
This property corresponds to [lang.chartContainerLabel](https://api.highcharts.com/highcharts/lang.accessibility.chartContainerLabel),
and requires the [accessibility module](https://www.highcharts.com/docs/accessibility/accessibility-module).",
      "name": "ariaLabel",
      "optional": true,
      "type": "string",
    },
    {
      "description": "The height of the chart plot in pixels. It does not include legend and filter.",
      "name": "chartHeight",
      "optional": true,
      "type": "number",
    },
    {
      "description": "Defines the minimum allowed height of the chart plot. Use this when \`fitHeight=true\` to
prevent the chart plot from becoming too small to display its content. When the parent
container is smaller than the minimum height, a vertical scrollbar appears automatically.",
      "name": "chartMinHeight",
      "optional": true,
      "type": "number",
    },
    {
      "description": "Defines the minimum allowed width of the chart plot. When the parent container is smaller the
minimum width, the horizontal scrollbar is automatically added.",
      "name": "chartMinWidth",
      "optional": true,
      "type": "number",
    },
    {
      "description": "Defines options for filtering in the chart, including:
* \`seriesFilter\` (optional, boolean) - Displays default series filter at the top of the chart.
* \`additionalFilters\` (optional, slot) - A slot for custom chart filters at the top of the chart.",
      "inlineType": {
        "name": "BaseFilterOptions",
        "properties": [
          {
            "name": "additionalFilters",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "seriesFilter",
            "optional": true,
            "type": "boolean",
          },
        ],
        "type": "object",
      },
      "name": "filter",
      "optional": true,
      "type": "BaseFilterOptions",
    },
    {
      "defaultValue": "false",
      "description": "The chart automatically adjusts its height to fill the parent container when this property is set.",
      "name": "fitHeight",
      "optional": true,
      "type": "boolean",
    },
    {
      "description": "The Highcharts instance, which can be obtained using \`import Highcharts from "highcharts"\`.
Supported Highcharts versions: 12.",
      "name": "highcharts",
      "optional": false,
      "type": "object | null",
    },
    {
      "description": "An object that contains all of the localized strings required by the component.",
      "i18nTag": true,
      "inlineType": {
        "name": "PieI18nStrings",
        "properties": [
          {
            "name": "chartRoleDescription",
            "optional": true,
            "type": "string",
          },
          {
            "name": "detailPopoverDismissAriaLabel",
            "optional": true,
            "type": "string",
          },
          {
            "name": "errorText",
            "optional": true,
            "type": "string",
          },
          {
            "name": "legendAriaLabel",
            "optional": true,
            "type": "string",
          },
          {
            "name": "loadingText",
            "optional": true,
            "type": "string",
          },
          {
            "name": "recoveryText",
            "optional": true,
            "type": "string",
          },
          {
            "name": "segmentRoleDescription",
            "optional": true,
            "type": "string",
          },
          {
            "name": "seriesFilterLabel",
            "optional": true,
            "type": "string",
          },
          {
            "name": "seriesFilterPlaceholder",
            "optional": true,
            "type": "string",
          },
          {
            "name": "seriesFilterSelectedAriaLabel",
            "optional": true,
            "type": "string",
          },
        ],
        "type": "object",
      },
      "name": "i18nStrings",
      "optional": true,
      "type": "PieI18nStrings",
    },
    {
      "description": "Description text displayed in the donut chart's inner area.",
      "name": "innerAreaDescription",
      "optional": true,
      "type": "string",
    },
    {
      "description": "Title displayed in the donut chart's inner area.",
      "name": "innerAreaTitle",
      "optional": true,
      "type": "string",
    },
    {
      "description": "Defines chart legend options, including:
* \`enabled\` (optional, boolean) - Hides legend when set to \`false\`.
* \`title\` (optional, string) - Visible label, shown above the legend.
* \`actions\` (optional, slot) - A slot before the legend that can be used to render custom actions.",
      "inlineType": {
        "name": "BaseLegendOptions",
        "properties": [
          {
            "name": "actions",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "enabled",
            "optional": true,
            "type": "boolean",
          },
          {
            "name": "title",
            "optional": true,
            "type": "string",
          },
        ],
        "type": "object",
      },
      "name": "legend",
      "optional": true,
      "type": "BaseLegendOptions",
    },
    {
      "description": "Defines options to represent empty, no-match, loading, and error state of the chart, including:
* \`statusType\` (optional, "finished" | "loading" | "error") - Specifies the current status of loading data.
* \`empty\` (optional, ReactNode) - Content displayed when the chart data is empty.
* \`noMatch\` (optional, ReactNode) - Content displayed when there is no data to display due to the built-in filtering.
* \`loading\` (optional, ReactNode) - Content displayed when \`statusType="loading"\`. If omitted, the default loading state
is shown, using \`i18n.loadingText\` or built-in i18n.
* \`error\` (optional, ReactNode) - Content displayed when \`statusType="error"\`. If omitted, the default error state
is shown, using \`i18n.errorText\` and \`i18n.recoveryText\` (when \`onRecoveryClick\` is provided), or built-in i18n.
* \`onRecoveryClick\` (optional, function) - Called when the user clicks the recovery button that appears when using default error
state, and only if \`onRecoveryClick\` is provided. Use this to enable the user to retry a failed request or provide another option
for the user to recover from the error.",
      "inlineType": {
        "name": "BaseNoDataOptions",
        "properties": [
          {
            "name": "empty",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "error",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "loading",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "noMatch",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "onRecoveryClick",
            "optional": true,
            "type": "NonCancelableEventHandler<{}>",
          },
          {
            "name": "statusType",
            "optional": true,
            "type": ""finished" | "loading" | "error"",
          },
        ],
        "type": "object",
      },
      "name": "noData",
      "optional": true,
      "type": "BaseNoDataOptions",
    },
    {
      "description": "A function determining the segment description displayed on the chart below the segment title.",
      "inlineType": {
        "name": "(props: PieChartProps.SegmentDescriptionRenderProps) => string",
        "parameters": [
          {
            "name": "props",
            "type": "PieChartProps.SegmentDescriptionRenderProps",
          },
        ],
        "returnType": "string",
        "type": "function",
      },
      "name": "segmentDescription",
      "optional": true,
      "type": "((props: PieChartProps.SegmentDescriptionRenderProps) => string)",
    },
    {
      "description": "A function that determines the title of a segment displayed on the chart. The title appears above the segment
description defined by \`segmentDescription\`. By default, it displays the segment name. You can hide the title
by returning an empty string from the function.",
      "inlineType": {
        "name": "(props: PieChartProps.SegmentDescriptionRenderProps) => string",
        "parameters": [
          {
            "name": "props",
            "type": "PieChartProps.SegmentDescriptionRenderProps",
          },
        ],
        "returnType": "string",
        "type": "function",
      },
      "name": "segmentTitle",
      "optional": true,
      "type": "((props: PieChartProps.SegmentDescriptionRenderProps) => string)",
    },
    {
      "description": "Defines series options of the chart.
This property corresponds to [series](https://api.highcharts.com/highcharts/series), and extends it
with an additional "donut" series type.

Supported series types:
* [pie](https://api.highcharts.com/highcharts/series.pie).
* donut - the pie series with predefined inner radius.",
      "inlineType": {
        "name": "PieChartProps.SeriesOptions",
        "type": "union",
        "values": [
          "PieSeriesOptions",
          "DonutSeriesOptions",
        ],
      },
      "name": "series",
      "optional": false,
      "type": "PieChartProps.SeriesOptions",
    },
    {
      "description": "Defines tooltip options of the chart, including:
* \`enabled\` - (optional, boolean) - Hides the tooltip when set to false.
* \`size\` - (optional, "small" | "medium" | "large") - Specifies max tooltip size.
* \`details\` - (optional, function) - Provides a list of key-value pairs as tooltip's body.
* \`header\` - (optional, function) - Renders a custom tooltip header.
* \`body\` - (optional, function) - Renders a custom tooltip body.
* \`footer\` - (optional, function) - Renders a custom tooltip footer.",
      "inlineType": {
        "name": "PieChartProps.TooltipOptions",
        "properties": [
          {
            "name": "body",
            "optional": true,
            "type": "((props: TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "details",
            "optional": true,
            "type": "((props: TooltipSlotRenderProps) => ReadonlyArray<BaseTooltipDetail>)",
          },
          {
            "name": "enabled",
            "optional": true,
            "type": "boolean",
          },
          {
            "name": "footer",
            "optional": true,
            "type": "((props: TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "header",
            "optional": true,
            "type": "((props: TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "size",
            "optional": true,
            "type": ""small" | "medium" | "large"",
          },
        ],
        "type": "object",
      },
      "name": "tooltip",
      "optional": true,
      "type": "PieChartProps.TooltipOptions",
    },
    {
      "description": "Specifies which segments to show using their IDs. By default, all segments are visible and managed by the component.
If a segment doesn't have an ID, its name is used. When using this property, manage state updates with \`onVisibleSegmentsChange\`.",
      "name": "visibleSegments",
      "optional": true,
      "type": "ReadonlyArray<string>",
    },
  ],
  "regions": [
    {
      "description": "Custom content that renders when \`highcharts=null\`. It renders a spinner if not defined.",
      "isDefault": false,
      "name": "fallback",
    },
  ],
  "releaseStatus": "stable",
}
`;

exports[`internal core API matches snapshot > internal-core-chart 1`] = `
"module.exports = {
  "name": "CoreChart",
  "dashCaseName": "core-chart",
  "releaseStatus": "stable",
  "regions": [
    {
      "name": "fallback",
      "description": "Custom content that renders when \`highcharts=null\`. It renders a spinner if not defined.",
      "isDefault": false
    },
    {
      "name": "navigator",
      "description": "Prop for passing a custom navigation control component to be rendered with the chart.\\nUse this property to add timeline navigation, range selectors, or other custom navigation elements.",
      "isDefault": false
    }
  ],
  "functions": [],
  "properties": [
    {
      "name": "ariaDescription",
      "type": "string",
      "optional": true,
      "description": "Defines the ARIA description of the chart container.\\nThis property corresponds to [accessibility.description](https://api.highcharts.com/highcharts/accessibility.description),\\nand requires the [accessibility module](https://www.highcharts.com/docs/accessibility/accessibility-module)."
    },
    {
      "name": "ariaLabel",
      "type": "string",
      "optional": true,
      "description": "Defines the ARIA label for the chart container.\\nThis property corresponds to [lang.chartContainerLabel](https://api.highcharts.com/highcharts/lang.accessibility.chartContainerLabel),\\nand requires the [accessibility module](https://www.highcharts.com/docs/accessibility/accessibility-module)."
    },
    {
      "name": "callback",
      "type": "((chart: CoreChartProps.ChartAPI) => void)",
      "inlineType": {
        "name": "(chart: CoreChartProps.ChartAPI) => void",
        "type": "function",
        "returnType": "void",
        "parameters": [
          {
            "name": "chart",
            "type": "CoreChartProps.ChartAPI"
          }
        ]
      },
      "optional": true,
      "description": "The callback to init the chart's API when it is ready. The API includes the Highcharts chart object, and\\nadditional Cloudscape methods."
    },
    {
      "name": "chartHeight",
      "type": "number",
      "optional": true,
      "description": "The height of the chart plot in pixels. It does not include legend and filter."
    },
    {
      "name": "chartMinHeight",
      "type": "number",
      "optional": true,
      "description": "Defines the minimum allowed height of the chart plot. Use this when \`fitHeight=true\` to\\nprevent the chart plot from becoming too small to display its content. When the parent\\ncontainer is smaller than the minimum height, a vertical scrollbar appears automatically."
    },
    {
      "name": "chartMinWidth",
      "type": "number",
      "optional": true,
      "description": "Defines the minimum allowed width of the chart plot. When the parent container is smaller the\\nminimum width, the horizontal scrollbar is automatically added."
    },
    {
      "name": "className",
      "type": "string",
      "optional": true,
      "description": "This is used to provide a test-utils selector. Do not use this property to provide custom styles."
    },
    {
      "name": "emphasizeBaseline",
      "type": "boolean",
      "optional": true,
      "description": "When set to \`true\`, adds a visual emphasis on the zero baseline axis."
    },
    {
      "name": "filter",
      "type": "BaseFilterOptions",
      "inlineType": {
        "name": "BaseFilterOptions",
        "type": "object",
        "properties": [
          {
            "name": "additionalFilters",
            "type": "React.ReactNode",
            "optional": true
          },
          {
            "name": "seriesFilter",
            "type": "boolean",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "Defines options for filtering in the chart, including:\\n* \`seriesFilter\` (optional, boolean) - Displays default series filter at the top of the chart.\\n* \`additionalFilters\` (optional, slot) - A slot for custom chart filters at the top of the chart."
    },
    {
      "name": "fitHeight",
      "type": "boolean",
      "optional": true,
      "description": "The chart automatically adjusts its height to fill the parent container when this property is set."
    },
    {
      "name": "footer",
      "type": "CoreChartProps.FooterOptions",
      "inlineType": {
        "name": "CoreChartProps.FooterOptions",
        "type": "object",
        "properties": [
          {
            "name": "content",
            "type": "React.ReactNode",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "A custom slot below the chart plot and legend."
    },
    {
      "name": "getLegendTooltipContent",
      "type": "GetLegendTooltipContent",
      "inlineType": {
        "name": "GetLegendTooltipContent",
        "type": "function",
        "returnType": "LegendTooltipContent",
        "parameters": [
          {
            "name": "props",
            "type": "GetLegendTooltipContentProps"
          }
        ]
      },
      "optional": true,
      "description": "Called whenever a legend item is hovered to provide content for legend tooltip's header, body, and (optional) footer.\\nIf not provided, no tooltip will be displayed."
    },
    {
      "name": "getTooltipContent",
      "type": "CoreChartProps.GetTooltipContent",
      "inlineType": {
        "name": "CoreChartProps.GetTooltipContent",
        "type": "function",
        "returnType": "CoreChartProps.TooltipContentRenderer",
        "parameters": [
          {
            "name": "props",
            "type": "CoreChartProps.GetTooltipContentProps"
          }
        ]
      },
      "optional": true,
      "description": "Called whenever chart tooltip is rendered to provide content for tooltip's header, body, and (optional) footer."
    },
    {
      "name": "header",
      "type": "CoreChartProps.HeaderOptions",
      "inlineType": {
        "name": "CoreChartProps.HeaderOptions",
        "type": "object",
        "properties": [
          {
            "name": "content",
            "type": "React.ReactNode",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "A custom slot above the chart plot, chart's axis title, and filter."
    },
    {
      "name": "highcharts",
      "type": "object | null",
      "optional": false,
      "description": "The Highcharts instance, which can be obtained using \`import Highcharts from \\"highcharts\\"\`.\\nSupported Highcharts versions: 12."
    },
    {
      "name": "i18nStrings",
      "type": "CartesianI18nStrings & PieI18nStrings",
      "inlineType": {
        "name": "CartesianI18nStrings & PieI18nStrings",
        "type": "union",
        "values": [
          "CartesianI18nStrings",
          "PieI18nStrings"
        ]
      },
      "optional": true,
      "description": "An object that contains all of the localized strings required by the component.",
      "i18nTag": true
    },
    {
      "name": "keyboardNavigation",
      "type": "boolean",
      "optional": true,
      "description": "Use Cloudscape keyboard navigation, \`true\` by default."
    },
    {
      "name": "legend",
      "type": "CoreChartProps.LegendOptions",
      "inlineType": {
        "name": "CoreChartProps.LegendOptions",
        "type": "object",
        "properties": [
          {
            "name": "actions",
            "type": "React.ReactNode",
            "optional": true
          },
          {
            "name": "bottomMaxHeight",
            "type": "number",
            "optional": true
          },
          {
            "name": "enabled",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "position",
            "type": "\\"side\\" | \\"bottom\\"",
            "optional": true
          },
          {
            "name": "title",
            "type": "string",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "Chart legend options."
    },
    {
      "name": "noData",
      "type": "BaseNoDataOptions",
      "inlineType": {
        "name": "BaseNoDataOptions",
        "type": "object",
        "properties": [
          {
            "name": "empty",
            "type": "React.ReactNode",
            "optional": true
          },
          {
            "name": "error",
            "type": "React.ReactNode",
            "optional": true
          },
          {
            "name": "loading",
            "type": "React.ReactNode",
            "optional": true
          },
          {
            "name": "noMatch",
            "type": "React.ReactNode",
            "optional": true
          },
          {
            "name": "onRecoveryClick",
            "type": "NonCancelableEventHandler<{}>",
            "optional": true
          },
          {
            "name": "statusType",
            "type": "\\"finished\\" | \\"loading\\" | \\"error\\"",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "Defines options to represent empty, no-match, loading, and error state of the chart, including:\\n* \`statusType\` (optional, \\"finished\\" | \\"loading\\" | \\"error\\") - Specifies the current status of loading data.\\n* \`empty\` (optional, ReactNode) - Content displayed when the chart data is empty.\\n* \`noMatch\` (optional, ReactNode) - Content displayed when there is no data to display due to the built-in filtering.\\n* \`loading\` (optional, ReactNode) - Content displayed when \`statusType=\\"loading\\"\`. If omitted, the default loading state\\nis shown, using \`i18n.loadingText\` or built-in i18n.\\n* \`error\` (optional, ReactNode) - Content displayed when \`statusType=\\"error\\"\`. If omitted, the default error state\\nis shown, using \`i18n.errorText\` and \`i18n.recoveryText\` (when \`onRecoveryClick\` is provided), or built-in i18n.\\n* \`onRecoveryClick\` (optional, function) - Called when the user clicks the recovery button that appears when using default error\\nstate, and only if \`onRecoveryClick\` is provided. Use this to enable the user to retry a failed request or provide another option\\nfor the user to recover from the error."
    },
    {
      "name": "options",
      "type": "CoreChartProps.ChartOptions",
      "inlineType": {
        "name": "CoreChartProps.ChartOptions",
        "type": "union",
        "values": [
          "Omit<Highcharts.Options, \\"xAxis\\" | \\"yAxis\\">",
          "{ xAxis?: CoreChartProps.XAxisOptions | Array<CoreChartProps.XAxisOptions> | undefined; yAxis?: CoreChartProps.YAxisOptions | Array<CoreChartProps.YAxisOptions> | undefined; }"
        ]
      },
      "optional": false,
      "description": "The Highcharts options. Cloudscape injects custom styles and settings, but all can be\\noverridden with explicitly provided options. An exception is event handlers - those are\\nnot overridden, but merged with Cloudscape event handlers so that both are getting called."
    },
    {
      "name": "tooltip",
      "type": "CoreChartProps.TooltipOptions",
      "inlineType": {
        "name": "CoreChartProps.TooltipOptions",
        "type": "object",
        "properties": [
          {
            "name": "enabled",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "placement",
            "type": "\\"target\\" | \\"middle\\" | \\"outside\\"",
            "optional": true
          },
          {
            "name": "size",
            "type": "\\"small\\" | \\"medium\\" | \\"large\\"",
            "optional": true
          }
        ]
      },
      "optional": true,
      "description": "The Cloudscape tooltip, that comes with a vertical cursor when used on cartesian series.\\nThe tooltip content is only shown when \`getContent\` property is defined, which is called\\nfor each visited { x, y } point."
    },
    {
      "name": "verticalAxisTitlePlacement",
      "type": "string",
      "inlineType": {
        "name": "\\"top\\" | \\"side\\"",
        "type": "union",
        "values": [
          "top",
          "side"
        ]
      },
      "optional": true,
      "description": "Controls the placement of the vertical axis title.\\nWhen set to \\"side\\", displays the title along the axis line."
    },
    {
      "name": "visibleItems",
      "type": "ReadonlyArray<string>",
      "optional": true,
      "description": "IDs of visible series or points."
    }
  ],
  "events": [
    {
      "name": "onClearHighlight",
      "description": "Called whenever chart point or group loses highlight.",
      "cancelable": false,
      "detailType": "CoreChartProps.HighlightClearDetail",
      "detailInlineType": {
        "name": "CoreChartProps.HighlightClearDetail",
        "type": "object",
        "properties": [
          {
            "name": "isApiCall",
            "type": "boolean",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onHighlight",
      "description": "Called whenever chart point or group is highlighted.",
      "cancelable": false,
      "detailType": "CoreChartProps.HighlightChangeDetail",
      "detailInlineType": {
        "name": "CoreChartProps.HighlightChangeDetail",
        "type": "object",
        "properties": [
          {
            "name": "group",
            "type": "ReadonlyArray<Highcharts.Point>",
            "optional": false
          },
          {
            "name": "isApiCall",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "point",
            "type": "Highcharts.Point | null",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onLegendItemHighlight",
      "description": "Called when a legend item is highlighted.",
      "cancelable": false,
      "detailType": "CoreChartProps.LegendItemHighlightDetail",
      "detailInlineType": {
        "name": "CoreChartProps.LegendItemHighlightDetail",
        "type": "object",
        "properties": [
          {
            "name": "item",
            "type": "LegendItem",
            "optional": false
          }
        ]
      }
    },
    {
      "name": "onVisibleItemsChange",
      "description": "Called when series/points visibility changes due to user interaction with legend or filter.",
      "cancelable": false,
      "detailType": "CoreChartProps.VisibleItemsChangeDetail",
      "detailInlineType": {
        "name": "CoreChartProps.VisibleItemsChangeDetail",
        "type": "object",
        "properties": [
          {
            "name": "isApiCall",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "items",
            "type": "ReadonlyArray<LegendItem>",
            "optional": false
          }
        ]
      }
    }
  ]
};"
`;
