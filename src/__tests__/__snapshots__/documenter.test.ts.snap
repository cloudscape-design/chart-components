// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`definition for cartesian-chart matches the snapshot > cartesian-chart 1`] = `
{
  "dashCaseName": "cartesian-chart",
  "events": [
    {
      "cancelable": false,
      "description": "A callback, executed when series visibility is toggled by clicking on legend items.",
      "detailInlineType": {
        "name": "{ visibleSeries: Array<string>; }",
        "properties": [
          {
            "name": "visibleSeries",
            "optional": false,
            "type": "Array<string>",
          },
        ],
        "type": "object",
      },
      "detailType": "{ visibleSeries: Array<string>; }",
      "name": "onChangeVisibleSeries",
    },
  ],
  "functions": [
    {
      "name": "setVisibleSeries",
      "parameters": [
        {
          "name": "visibleSeries",
          "type": "ReadonlyArray<string>",
        },
      ],
      "returnType": "void",
    },
  ],
  "name": "CartesianChart",
  "properties": [
    {
      "description": "ARIA description of the chart.
This property corresponds to [accessibility.description](https://api.highcharts.com/highcharts/accessibility.description),
and requires the [accessibility module](https://www.highcharts.com/docs/accessibility/accessibility-module).",
      "name": "ariaDescription",
      "optional": true,
      "type": "string",
    },
    {
      "description": "ARIA label of the chart container.
This property corresponds to [lang.chartContainerLabel](https://api.highcharts.com/highcharts/lang.accessibility.chartContainerLabel),
and requires the [accessibility module](https://www.highcharts.com/docs/accessibility/accessibility-module).",
      "name": "ariaLabel",
      "optional": true,
      "type": "string",
    },
    {
      "description": "The height of the chart plot in pixels. It does not include legend, filter, header, and footer.",
      "name": "chartHeight",
      "optional": true,
      "type": "number",
    },
    {
      "description": "Defines the minimal allowed height of the chart plot. Use it when \`fitHeight=true\`
to prevent the chart plot become too small to digest the content of it. If the parent container is
too small to satisfy the min width value, the horizontal scrollbar is automatically added.",
      "name": "chartMinHeight",
      "optional": true,
      "type": "number",
    },
    {
      "description": "Defines the minimal allowed width of the chart plot. If the parent container is too small to satisfy the min
width value, the horizontal scrollbar is automatically added.",
      "name": "chartMinWidth",
      "optional": true,
      "type": "number",
    },
    {
      "description": "When set to \`true\`, adds a visual emphasis on the zero baseline axis.",
      "name": "emphasizeBaselineAxis",
      "optional": true,
      "type": "boolean",
    },
    {
      "description": "Use filter to render default series filter, custom series filter, and/or additional filters.",
      "inlineType": {
        "name": "ChartFilterOptions",
        "properties": [
          {
            "name": "additionalFilters",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "seriesFilter",
            "optional": true,
            "type": "boolean",
          },
        ],
        "type": "object",
      },
      "name": "filter",
      "optional": true,
      "type": "ChartFilterOptions",
    },
    {
      "description": "When set, the chart grows automatically to fill the parent container.",
      "name": "fitHeight",
      "optional": true,
      "type": "boolean",
    },
    {
      "description": "Use header to render custom content below the chart (under the legend if present).",
      "inlineType": {
        "name": "ChartFooterOptions",
        "properties": [
          {
            "name": "content",
            "optional": true,
            "type": "React.ReactNode",
          },
        ],
        "type": "object",
      },
      "name": "footer",
      "optional": true,
      "type": "ChartFooterOptions",
    },
    {
      "description": "Use header to render custom content above the chart.",
      "inlineType": {
        "name": "ChartHeaderOptions",
        "properties": [
          {
            "name": "content",
            "optional": true,
            "type": "React.ReactNode",
          },
        ],
        "type": "object",
      },
      "name": "header",
      "optional": true,
      "type": "ChartHeaderOptions",
    },
    {
      "description": "The Highcharts instance, that can be obtained as \`import Highcharts from 'highcharts'\`.
Supported Highcharts versions:
* \`v12\`",
      "name": "highcharts",
      "optional": false,
      "type": "object | null",
    },
    {
      "description": "Inverts X and Y axes. Use it to show horizontal columns (bars).
This property corresponds to [chart.inverted](https://api.highcharts.com/highcharts/chart.inverted).",
      "name": "inverted",
      "optional": true,
      "type": "boolean",
    },
    {
      "description": "Chart legend options.",
      "inlineType": {
        "name": "ChartLegendOptions",
        "properties": [
          {
            "name": "actions",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "enabled",
            "optional": true,
            "type": "boolean",
          },
          {
            "name": "title",
            "optional": true,
            "type": "string",
          },
        ],
        "type": "object",
      },
      "name": "legend",
      "optional": true,
      "type": "ChartLegendOptions",
    },
    {
      "description": "The empty, no-match, loading, or error state of the chart.
It requires the \`no-data-to-display\` module.",
      "inlineType": {
        "name": "ChartNoDataOptions",
        "properties": [
          {
            "name": "empty",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "error",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "loading",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "noMatch",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "onRecoveryClick",
            "optional": true,
            "type": "NonCancelableEventHandler<{}>",
          },
          {
            "name": "statusType",
            "optional": true,
            "type": ""finished" | "loading" | "error"",
          },
        ],
        "type": "object",
      },
      "name": "noData",
      "optional": true,
      "type": "ChartNoDataOptions",
    },
    {
      "description": "Chart series and data.
This property corresponds to [series](https://api.highcharts.com/highcharts/series).

Supported series types:
* [area](https://api.highcharts.com/highcharts/series.area).
* [areaspline](https://api.highcharts.com/highcharts/series.areaspline).
* [column](https://api.highcharts.com/highcharts/series.column).
* [errorbar](https://api.highcharts.com/highcharts/series.errorbar).
* [line](https://api.highcharts.com/highcharts/series.line).
* [scatter](https://api.highcharts.com/highcharts/series.scatter).
* [spline](https://api.highcharts.com/highcharts/series.spline).
* x-threshold - The line-like series to represent x-axis threshold (vertical, when \`inverted=false\`).
* y-threshold - The line-like series to represent y-axis threshold (horizontal, when \`inverted=false\`).",
      "name": "series",
      "optional": false,
      "type": "Array<CartesianChartProps.SeriesOptions>",
    },
    {
      "description": "Specifies series stacking behavior. Use it for column- or area- series.",
      "name": "stacked",
      "optional": true,
      "type": "boolean",
    },
    {
      "description": "Chart tooltip that replaces [tooltip](https://api.highcharts.com/highcharts/tooltip).

Supported properties:
* \`enabled\` - (optional, boolean) - Use it to hide the tooltip.
* \`size\` - (optional, "small" | "medium" | "large") - Use it to specify max tooltip size.
* \`placement\` - (optional, "target" | "middle" | "outside") - Use it to specify preferred tooltip placement.
* \`title\` - (optional, function) - Use it to provide a custom tooltip title.
* \`content\` - (optional, function) - Use it to provide a custom tooltip content.
* \`footer\` - (optional, function) - Use it to add a tooltip footer.
* \`series\` - (optional, function) - Use it to extend the default series list, in order to use custom value formatting,
inject links, or add expandable items.",
      "inlineType": {
        "name": "CartesianChartProps.TooltipOptions",
        "properties": [
          {
            "name": "body",
            "optional": true,
            "type": "((props: TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "enabled",
            "optional": true,
            "type": "boolean",
          },
          {
            "name": "footer",
            "optional": true,
            "type": "((props: TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "header",
            "optional": true,
            "type": "((props: TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "placement",
            "optional": true,
            "type": ""target" | "middle" | "outside"",
          },
          {
            "name": "series",
            "optional": true,
            "type": "((props: TooltipSeriesRenderProps) => CartesianChartProps.TooltipSeriesFormatted)",
          },
          {
            "name": "size",
            "optional": true,
            "type": ""small" | "medium" | "large"",
          },
        ],
        "type": "object",
      },
      "name": "tooltip",
      "optional": true,
      "type": "CartesianChartProps.TooltipOptions",
    },
    {
      "defaultValue": ""top"",
      "description": "Defines placement of the vertical axis (can be either Y or X depending on \`inverted\`).",
      "inlineType": {
        "name": ""top" | "side"",
        "type": "union",
        "values": [
          "top",
          "side",
        ],
      },
      "name": "verticalAxisTitlePlacement",
      "optional": true,
      "type": "string",
    },
    {
      "description": "List of series IDs to be visible. When unset, all series are visible by default, but can be hidden by clicking on the
legend. When a series does not have an ID, a series name is used instead.
When the property is provided, use \`onChangeVisibleSegments\` to update it when the legend series filtering is used.",
      "name": "visibleSeries",
      "optional": true,
      "type": "ReadonlyArray<string>",
    },
    {
      "description": "X-axis options that extend [xAxis](https://api.highcharts.com/highcharts/xAxis).

Supported properties (Highcharts):
* \`title\` (optional, string) - The axis title.
* \`type\` (optional, 'linear' | 'datetime' | 'category' | 'logarithmic') - The axis type.
* * linear - Uses continuous proportional values scale.
* * datetime - Similar to linear, but takes epoch time as values.
* * category - Uses discrete scale, requires \`categories\` to be set.
* * logarithmic - Uses continuous logarithmic values scale.
* \`min\`, \`max\` (optional, number) - The axis value boundaries.
* \`tickInterval\` (optional, number) - The tick distance.
* \`categories\` (optional, Array<string>) - The predefined list of axis values to be used for categorical axes.

Additional properties (Cloudscape):
* \`valueFormatter\` (optional, function) - Takes axis tick as input and returns a formatted string. This formatter also
applies to the tooltip header.",
      "inlineType": {
        "name": "AxisOptions",
        "properties": [
          {
            "name": "categories",
            "optional": true,
            "type": "Array<string>",
          },
          {
            "name": "max",
            "optional": true,
            "type": "number",
          },
          {
            "name": "min",
            "optional": true,
            "type": "number",
          },
          {
            "name": "tickInterval",
            "optional": true,
            "type": "number",
          },
          {
            "name": "title",
            "optional": true,
            "type": "string",
          },
          {
            "name": "type",
            "optional": true,
            "type": ""category" | "datetime" | "linear" | "logarithmic"",
          },
          {
            "name": "valueFormatter",
            "optional": true,
            "type": "((value: number) => string)",
          },
        ],
        "type": "object",
      },
      "name": "xAxis",
      "optional": true,
      "type": "AxisOptions",
    },
    {
      "description": "Y-axis options that extend [xAxis](https://api.highcharts.com/highcharts/yAxis).

Supported properties (Highcharts):
* \`title\` (optional, string) - The axis title.
* \`type\` (optional, 'linear' | 'datetime' | 'category' | 'logarithmic') - The axis type.
* * linear - Uses continuous proportional values scale.
* * datetime - Similar to linear, but takes epoch time as values.
* * category - Uses discrete scale, requires \`categories\` to be set.
* * logarithmic - Uses continuous logarithmic values scale.
* \`min\`, \`max\` (optional, number) - The axis value boundaries.
* \`tickInterval\` (optional, number) - The tick distance.
* \`categories\` (optional, Array<string>) - The predefined list of axis values to be used for categorical axes.
* \`reversedStacks\` (optional, boolean) - Reverts series order in stacked series.

Additional properties (Cloudscape):
* \`valueFormatter\` (optional, function) - Takes axis tick as input and returns a formatted string. This formatter also
applies to the tooltip header.",
      "inlineType": {
        "name": "CartesianChartProps.YAxisOptions",
        "properties": [
          {
            "name": "categories",
            "optional": true,
            "type": "Array<string>",
          },
          {
            "name": "max",
            "optional": true,
            "type": "number",
          },
          {
            "name": "min",
            "optional": true,
            "type": "number",
          },
          {
            "name": "reversedStacks",
            "optional": true,
            "type": "boolean",
          },
          {
            "name": "tickInterval",
            "optional": true,
            "type": "number",
          },
          {
            "name": "title",
            "optional": true,
            "type": "string",
          },
          {
            "name": "type",
            "optional": true,
            "type": ""category" | "datetime" | "linear" | "logarithmic"",
          },
          {
            "name": "valueFormatter",
            "optional": true,
            "type": "((value: number) => string)",
          },
        ],
        "type": "object",
      },
      "name": "yAxis",
      "optional": true,
      "type": "CartesianChartProps.YAxisOptions",
    },
  ],
  "regions": [
    {
      "description": "Custom content to be rendered when \`highcharts=null\`. It defaults to a spinner.",
      "isDefault": false,
      "name": "fallback",
    },
  ],
  "releaseStatus": "stable",
}
`;

exports[`definition for pie-chart matches the snapshot > pie-chart 1`] = `
{
  "dashCaseName": "pie-chart",
  "events": [
    {
      "cancelable": false,
      "description": "A callback, executed when segments visibility is toggled by clicking on legend items.",
      "detailInlineType": {
        "name": "{ visibleSegments: Array<string>; }",
        "properties": [
          {
            "name": "visibleSegments",
            "optional": false,
            "type": "Array<string>",
          },
        ],
        "type": "object",
      },
      "detailType": "{ visibleSegments: Array<string>; }",
      "name": "onChangeVisibleSegments",
    },
  ],
  "functions": [
    {
      "name": "setVisibleSegments",
      "parameters": [
        {
          "name": "visibleSegments",
          "type": "ReadonlyArray<string>",
        },
      ],
      "returnType": "void",
    },
  ],
  "name": "PieChart",
  "properties": [
    {
      "description": "ARIA description of the chart.
This property corresponds to [accessibility.description](https://api.highcharts.com/highcharts/accessibility.description),
and requires the [accessibility module](https://www.highcharts.com/docs/accessibility/accessibility-module).",
      "name": "ariaDescription",
      "optional": true,
      "type": "string",
    },
    {
      "description": "ARIA label of the chart container.
This property corresponds to [lang.chartContainerLabel](https://api.highcharts.com/highcharts/lang.accessibility.chartContainerLabel),
and requires the [accessibility module](https://www.highcharts.com/docs/accessibility/accessibility-module).",
      "name": "ariaLabel",
      "optional": true,
      "type": "string",
    },
    {
      "description": "The height of the chart plot in pixels. It does not include legend, filter, header, and footer.",
      "name": "chartHeight",
      "optional": true,
      "type": "number",
    },
    {
      "description": "Defines the minimal allowed height of the chart plot. Use it when \`fitHeight=true\`
to prevent the chart plot become too small to digest the content of it. If the parent container is
too small to satisfy the min width value, the horizontal scrollbar is automatically added.",
      "name": "chartMinHeight",
      "optional": true,
      "type": "number",
    },
    {
      "description": "Defines the minimal allowed width of the chart plot. If the parent container is too small to satisfy the min
width value, the horizontal scrollbar is automatically added.",
      "name": "chartMinWidth",
      "optional": true,
      "type": "number",
    },
    {
      "description": "Use filter to render default series filter, custom series filter, and/or additional filters.",
      "inlineType": {
        "name": "ChartFilterOptions",
        "properties": [
          {
            "name": "additionalFilters",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "seriesFilter",
            "optional": true,
            "type": "boolean",
          },
        ],
        "type": "object",
      },
      "name": "filter",
      "optional": true,
      "type": "ChartFilterOptions",
    },
    {
      "description": "When set, the chart grows automatically to fill the parent container.",
      "name": "fitHeight",
      "optional": true,
      "type": "boolean",
    },
    {
      "description": "Use header to render custom content below the chart (under the legend if present).",
      "inlineType": {
        "name": "ChartFooterOptions",
        "properties": [
          {
            "name": "content",
            "optional": true,
            "type": "React.ReactNode",
          },
        ],
        "type": "object",
      },
      "name": "footer",
      "optional": true,
      "type": "ChartFooterOptions",
    },
    {
      "description": "Use header to render custom content above the chart.",
      "inlineType": {
        "name": "ChartHeaderOptions",
        "properties": [
          {
            "name": "content",
            "optional": true,
            "type": "React.ReactNode",
          },
        ],
        "type": "object",
      },
      "name": "header",
      "optional": true,
      "type": "ChartHeaderOptions",
    },
    {
      "description": "The Highcharts instance, that can be obtained as \`import Highcharts from 'highcharts'\`.
Supported Highcharts versions:
* \`v12\`",
      "name": "highcharts",
      "optional": false,
      "type": "object | null",
    },
    {
      "description": "Inner description of the donut chart.",
      "name": "innerDescription",
      "optional": true,
      "type": "string",
    },
    {
      "description": "Inner title of the donut chart.",
      "name": "innerValue",
      "optional": true,
      "type": "string",
    },
    {
      "description": "Chart legend options.",
      "inlineType": {
        "name": "ChartLegendOptions",
        "properties": [
          {
            "name": "actions",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "enabled",
            "optional": true,
            "type": "boolean",
          },
          {
            "name": "title",
            "optional": true,
            "type": "string",
          },
        ],
        "type": "object",
      },
      "name": "legend",
      "optional": true,
      "type": "ChartLegendOptions",
    },
    {
      "description": "The empty, no-match, loading, or error state of the chart.
It requires the \`no-data-to-display\` module.",
      "inlineType": {
        "name": "ChartNoDataOptions",
        "properties": [
          {
            "name": "empty",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "error",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "loading",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "noMatch",
            "optional": true,
            "type": "React.ReactNode",
          },
          {
            "name": "onRecoveryClick",
            "optional": true,
            "type": "NonCancelableEventHandler<{}>",
          },
          {
            "name": "statusType",
            "optional": true,
            "type": ""finished" | "loading" | "error"",
          },
        ],
        "type": "object",
      },
      "name": "noData",
      "optional": true,
      "type": "ChartNoDataOptions",
    },
    {
      "description": "Chart segment options.",
      "inlineType": {
        "name": "PieChartProps.SegmentOptions",
        "properties": [
          {
            "name": "description",
            "optional": true,
            "type": "((props: PieChartProps.SegmentDescriptionRenderProps) => string) | null",
          },
          {
            "name": "title",
            "optional": true,
            "type": "((props: PieChartProps.SegmentDescriptionRenderProps) => string) | null",
          },
        ],
        "type": "object",
      },
      "name": "segmentOptions",
      "optional": true,
      "type": "PieChartProps.SegmentOptions",
    },
    {
      "description": "Chart series and data.
This property corresponds to [series](https://api.highcharts.com/highcharts/series).

Supported series types:
* [pie](https://api.highcharts.com/highcharts/series.pie).
* donut - the pie series with predefined inner radius.",
      "inlineType": {
        "name": "PieChartProps.SeriesOptions",
        "type": "union",
        "values": [
          "PieSeriesOptions",
          "DonutSeriesOptions",
        ],
      },
      "name": "series",
      "optional": false,
      "type": "PieChartProps.SeriesOptions",
    },
    {
      "description": "Chart tooltip that replaces [tooltip](https://api.highcharts.com/highcharts/tooltip).

Supported properties:
* \`enabled\` - (optional, boolean) - Use it to hide the tooltip.
* \`size\` - (optional, "small" | "medium" | "large") - Use it to specify max tooltip size.
* \`placement\` - (optional, "target" | "middle" | "outside") - Use it to specify preferred tooltip placement.
* \`title\` - (optional, function) - Use it to provide a custom tooltip title.
* \`content\` - (optional, function) - Use it to provide a custom tooltip content.
* \`footer\` - (optional, function) - Use it to add a tooltip footer.",
      "inlineType": {
        "name": "PieChartProps.TooltipOptions",
        "properties": [
          {
            "name": "body",
            "optional": true,
            "type": "((props: TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "enabled",
            "optional": true,
            "type": "boolean",
          },
          {
            "name": "footer",
            "optional": true,
            "type": "((props: TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "header",
            "optional": true,
            "type": "((props: TooltipSlotRenderProps) => React.ReactNode)",
          },
          {
            "name": "placement",
            "optional": true,
            "type": ""target" | "middle" | "outside"",
          },
          {
            "name": "size",
            "optional": true,
            "type": ""small" | "medium" | "large"",
          },
        ],
        "type": "object",
      },
      "name": "tooltip",
      "optional": true,
      "type": "PieChartProps.TooltipOptions",
    },
    {
      "description": "List of segments IDs to be visible. When unset, all segments are visible by default, but can be hidden by clicking on the
legend. When a segment does not have an ID, a segment name is used instead.
When the property is provided, use \`onChangeVisibleSegments\` to update it when the legend segment filtering is used.",
      "name": "visibleSegments",
      "optional": true,
      "type": "ReadonlyArray<string>",
    },
  ],
  "regions": [
    {
      "description": "Custom content to be rendered when \`highcharts=null\`. It defaults to a spinner.",
      "isDefault": false,
      "name": "fallback",
    },
  ],
  "releaseStatus": "stable",
}
`;
