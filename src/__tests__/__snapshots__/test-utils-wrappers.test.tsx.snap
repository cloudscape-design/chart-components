// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Generate test utils ElementWrapper > 'dom' ElementWrapper matches the snapshot 1`] = `
"
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { ElementWrapper } from '@cloudscape-design/test-utils-core/dom';
import { appendSelector } from '@cloudscape-design/test-utils-core/utils';

export { ElementWrapper };

import CartesianChartWrapper from './cartesian-chart';
import PieChartWrapper from './pie-chart';


export { CartesianChartWrapper };
export { PieChartWrapper };

declare module '@cloudscape-design/test-utils-core/dist/dom' {
   interface ElementWrapper {
    
/**
 * Returns the wrapper of the first CartesianChart that matches the specified CSS selector.
 * If no CSS selector is specified, returns the wrapper of the first CartesianChart.
 * If no matching CartesianChart is found, returns \`null\`.
 *
 * @param {string} [selector] CSS Selector
 * @returns {CartesianChartWrapper | null}
 */
findCartesianChart(selector?: string): CartesianChartWrapper | null;

/**
 * Returns an array of CartesianChart wrapper that matches the specified CSS selector.
 * If no CSS selector is specified, returns all of the CartesianCharts inside the current wrapper.
 * If no matching CartesianChart is found, returns an empty array.
 *
 * @param {string} [selector] CSS Selector
 * @returns {Array<CartesianChartWrapper>}
 */
findAllCartesianCharts(selector?: string): Array<CartesianChartWrapper>;
/**
 * Returns the wrapper of the first PieChart that matches the specified CSS selector.
 * If no CSS selector is specified, returns the wrapper of the first PieChart.
 * If no matching PieChart is found, returns \`null\`.
 *
 * @param {string} [selector] CSS Selector
 * @returns {PieChartWrapper | null}
 */
findPieChart(selector?: string): PieChartWrapper | null;

/**
 * Returns an array of PieChart wrapper that matches the specified CSS selector.
 * If no CSS selector is specified, returns all of the PieCharts inside the current wrapper.
 * If no matching PieChart is found, returns an empty array.
 *
 * @param {string} [selector] CSS Selector
 * @returns {Array<PieChartWrapper>}
 */
findAllPieCharts(selector?: string): Array<PieChartWrapper>;
   }
}


ElementWrapper.prototype.findCartesianChart = function(selector) {
  const rootSelector = \`.\${CartesianChartWrapper.rootSelector}\`;
  // casting to 'any' is needed to avoid this issue with generics
  // https://github.com/microsoft/TypeScript/issues/29132
  return (this as any).findComponent(selector ? appendSelector(selector, rootSelector) : rootSelector, CartesianChartWrapper);
};

ElementWrapper.prototype.findAllCartesianCharts = function(selector) {
  return this.findAllComponents(CartesianChartWrapper, selector);
};
ElementWrapper.prototype.findPieChart = function(selector) {
  const rootSelector = \`.\${PieChartWrapper.rootSelector}\`;
  // casting to 'any' is needed to avoid this issue with generics
  // https://github.com/microsoft/TypeScript/issues/29132
  return (this as any).findComponent(selector ? appendSelector(selector, rootSelector) : rootSelector, PieChartWrapper);
};

ElementWrapper.prototype.findAllPieCharts = function(selector) {
  return this.findAllComponents(PieChartWrapper, selector);
};


export default function wrapper(root: Element = document.body) {
  if (document && document.body && !document.body.contains(root)) {
    console.warn('[AwsUi] [test-utils] provided element is not part of the document body, interactions may work incorrectly')
  };
  return new ElementWrapper(root);
}
"
`;

exports[`Generate test utils ElementWrapper > 'selectors' ElementWrapper matches the snapshot 1`] = `
"
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { ElementWrapper } from '@cloudscape-design/test-utils-core/selectors';
import { appendSelector } from '@cloudscape-design/test-utils-core/utils';

export { ElementWrapper };

import CartesianChartWrapper from './cartesian-chart';
import PieChartWrapper from './pie-chart';


export { CartesianChartWrapper };
export { PieChartWrapper };

declare module '@cloudscape-design/test-utils-core/dist/selectors' {
   interface ElementWrapper {
    
/**
 * Returns a wrapper that matches the CartesianCharts with the specified CSS selector.
 * If no CSS selector is specified, returns a wrapper that matches CartesianCharts.
 *
 * @param {string} [selector] CSS Selector
 * @returns {CartesianChartWrapper}
 */
findCartesianChart(selector?: string): CartesianChartWrapper;

/**
 * Returns a multi-element wrapper that matches CartesianCharts with the specified CSS selector.
 * If no CSS selector is specified, returns a multi-element wrapper that matches CartesianCharts.
 *
 * @param {string} [selector] CSS Selector
 * @returns {MultiElementWrapper<CartesianChartWrapper>}
 */
findAllCartesianCharts(selector?: string): MultiElementWrapper<CartesianChartWrapper>;
/**
 * Returns a wrapper that matches the PieCharts with the specified CSS selector.
 * If no CSS selector is specified, returns a wrapper that matches PieCharts.
 *
 * @param {string} [selector] CSS Selector
 * @returns {PieChartWrapper}
 */
findPieChart(selector?: string): PieChartWrapper;

/**
 * Returns a multi-element wrapper that matches PieCharts with the specified CSS selector.
 * If no CSS selector is specified, returns a multi-element wrapper that matches PieCharts.
 *
 * @param {string} [selector] CSS Selector
 * @returns {MultiElementWrapper<PieChartWrapper>}
 */
findAllPieCharts(selector?: string): MultiElementWrapper<PieChartWrapper>;
   }
}


ElementWrapper.prototype.findCartesianChart = function(selector) {
  const rootSelector = \`.\${CartesianChartWrapper.rootSelector}\`;
  // casting to 'any' is needed to avoid this issue with generics
  // https://github.com/microsoft/TypeScript/issues/29132
  return (this as any).findComponent(selector ? appendSelector(selector, rootSelector) : rootSelector, CartesianChartWrapper);
};

ElementWrapper.prototype.findAllCartesianCharts = function(selector) {
  return this.findAllComponents(CartesianChartWrapper, selector);
};
ElementWrapper.prototype.findPieChart = function(selector) {
  const rootSelector = \`.\${PieChartWrapper.rootSelector}\`;
  // casting to 'any' is needed to avoid this issue with generics
  // https://github.com/microsoft/TypeScript/issues/29132
  return (this as any).findComponent(selector ? appendSelector(selector, rootSelector) : rootSelector, PieChartWrapper);
};

ElementWrapper.prototype.findAllPieCharts = function(selector) {
  return this.findAllComponents(PieChartWrapper, selector);
};


export default function wrapper(root: string = 'body') {
  return new ElementWrapper(root);
}
"
`;
